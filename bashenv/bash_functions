################################################################################
#
#  file: ${HOME}/.bash_functions
#
#  date: 03/18/2013
#
#  auth: Andrew Shultzabarger
#
#  desc: utility functions for system commands and bash sessions
#
################################################################################


escape()
{
  local args="$@"
  printf "$args" | sed -e "s/'/'\\\\''/g; 1s/^/'/; \$s/\$/'/"
}

manbuiltin() # easy access to bash built-ins
{
  man bash | less -p "^ {4,7}$1 "
  #help $1 # another potential doc source
}

useshopt()
{
  local isset=$( shopt "${1}" > /dev/null ; printf $? )
  shopt -s "${1}" ; "${@:2}"
  [[ 1 == "${isset}" ]] && shopt -u "${1}"
}

ignorecase()
{
  useshopt "nocasematch" "$@"
}

uc()
{
  if [[ $# -gt 0 ]]
  then
    tr '[:lower:]' '[:upper:]' <<<"$@"
  fi
}

lc()
{
  if [[ $# -gt 0 ]]
  then
    tr '[:upper:]' '[:lower:]' <<<"$@"
  fi
}

nullglob()
{
  useshopt "nullglob" "$@"
}

arrjoin()
{ 
  local IFS="$1"
  shift
  echo ${@}
}

maxlen()
{
  local wide=0
  for e in "${@}"
  do
    len=${#e}
    wide=$(( len > wide ? len : wide ))
  done
  echo ${wide}
}

streq()
{
  if [[ ${#1} -eq ${#2} ]] && [[ $1 == $2 ]] ; then
    echo $TRUE ;
  else
    echo $FALSE ;
  fi
}

streqi()
{
  ignorecase streq "$@"
}

silent()
{
  [[ $# -gt 0 ]] && "$@" &> /dev/null
}

silentout()
{
  [[ $# -gt 0 ]] && "$@" 1> /dev/null
}

silenterr()
{
  [[ $# -gt 0 ]] && "$@" 2> /dev/null
}

rmtrailing()
{
  if [[ ${#} -gt 1 ]]
  then
    shopt -s extglob
    echo "${1%%+(${2})}"
  fi
}

rmtrailingslashes()
{
  if [[ ${#} -gt 0 ]]
  then
    rmtrailing "${1}" '/'
  fi
}

dos2unix()
{
  if type -P dos2unix > /dev/null
  then
    command dos2unix "$@"
  else
    perl -pi -e 's/\r\n|\n|\r/\n/g' "$@"
  fi
}

unix2dos()
{
  if type -P unix2dos > /dev/null
  then
    command unix2dos "$@"
  else
    perl -pi -e 's/\r\n|\n|\r/\r\n/g' "$@"
  fi
}

lineat()
{
  # prints the N'th line of each file specified, prefixed by the
  #  filename if more than one file
  for file in "${@:2}"
  do
    [[ $# -gt 2 ]] && printf "${file}:"
    perl -ne "${1} == $. and print and exit" "${file}"
  done
}

lineof()
{
  local args=()
  local case=

  # poor man's option parsing
  while test $# -gt 0
  do
    case "${1}" in
      (-i) case=i ;;
      ( *) args=("${args[@]}" "${1}") ;;
    esac
    shift
  done

  # prints the line number(s) containing a given pattern in each file
  #  specified, prefixed by the filename if more than one file
  for curr in "${args[@]:1}"
  do
    local code="/${args[0]}/${case} and print $..$/"
    if [[ ${#args[@]} -gt 2 ]]
    then
      for line in $( perl -ne "${code}" "${curr}" )
      do
        echo "${curr}:${line}"
      done
    else
      perl -ne "${code}" "${curr}"
    fi
  done
}

perlprof()
{
  #
  # this uses() module Devel::NYTProf to generate profiling statistics for perl programs
  #
  # simply use 'perlprof' in place of 'perl' when invoking the interpreter, and a corresponding
  # output file "./<basename of script>-nytprof.out" will be generated. the options below will
  # control various behaviors and features of the generated output file.
  #
  # once the profile has been generated, there are various tools to process the output file
  # for evaluation (each with their own man page):
  #
  #  nytprofhtml  - (main processor) generates fully cross-referenced HTML reports
  #  nytprofcalls - processes the call events
  #  nytprofcg    - translates into a format for KCachegrind
  #  nytprofcsv   - generates a report in CSV format
  #  nytprofmerge - reads multiple NYTProf output files and outputs a merged one
  #  nytprofpf    - generates a report for plat_forms
  #
  # by default, this will() process the output file through nytprofhtml into a directory
  # with a name similar to the output file (according to the options below). creates the
  # directory if needed, and deletes any preexisting contents otherwise.
  #

  # see section NYTPROF ENVIRONMENT VARIABLE in perldoc Devel::NYTProf
  local file_pid=1 # addpid
  local file_timestamp=1 # addtimestamp
  local file_savesrc=0 # savesrc
  local file_compress=0 # compress
  local out_trace=0 # trace
  local prof_start=begin # start
  #local prof_start=init # start
  local prof_optimize=0 # optimize # disable the perl (source code) optimizer for more accurate line references
  local prof_subs=1 # subs
  local prof_blocks=1 # blocks
  local prof_statements=1 # stmts
  local prof_slowops=2 # slowops
  local prof_sigexit="int,hup,abrt,kill,quit,segv,term" # sigexit # see kill -l for list
  local prof_forkdepth=-1 # forkdepth # -1 is unlimited depth
  local prof_clock=6 # clock # CLOCK_MONOTONIC # for definitions, see:  grep -r 'define *CLOCK_' /usr/include

  local file_name="" # file

  local output_dir="."
  local output_suffix="-nytprof.out"
  for word in $@
  do
    local file_bname=$(basename "${word}")
    perl -ne 'print; /^-\S*e\S*$/ and exit 1' <<<"${word}"
    [[ $? == 1 ]] && file_name="${output_dir}/inline${output_suffix}" && break
    [[ -f $word ]] && file_name="${output_dir}/${file_bname}${output_suffix}" && break
  done

  export NYTPROF="addpid=${file_pid}:addtimestamp=${file_timestamp}:savesrc=${file_savesrc}:compress=${file_compress}:trace=${out_trace}:start=${prof_start}:optimize=${prof_optimize}:subs=${prof_subs}:blocks=${prof_blocks}:stmts=${prof_statements}:slowops=${prof_slowops}:sigexit=${prof_sigexit}:forkdepth=${prof_forkdepth}:clock=${prof_clock}:file=${file_name}"

  PERL5OPT="-d:NYTProf" perl $@

  local profile=$(ls -t "${file_name}"* | head -n 1)

  if [[ -f "${profile}" ]]
  then
    local output=${output_dir}/$(basename "${file_name}" | sed -e "s/${output_suffix}.*/${output_suffix}/")
    nytprofhtml --file "${profile}" --out "${output}" --delete
  else
    echo "error creating report: no such profile: ${profile}"
  fi
}

tree()
{
  if type -P tree > /dev/null
  then
    command tree "$@"
  else
    local path="."
    [[ -n ${1} ]] && path="${1}"
    find "${path}" | sed -e 's;[^/]*/;|____;g' -e 's;____|;  |;g'
  fi
}

now_long()
{
  date +"${DATETIME_FORMAT_LONG}"
}

now()
{
  date +"${DATETIME_FORMAT}"
}

readablesec()
{
  if [[ $# -gt 0 ]]
  then
    local seconds=${1}
    if [[ $seconds -gt 86400 ]] # seconds in a day
    then
      printf "%d days " $(( seconds / 86400 ))
    fi
    date -d "1970-01-01 + $seconds seconds" "+%H hrs %M min %S sec"

  fi
}

tgzbackup()
{
  if [[ ${#} -gt 0 ]]
  then
    if [[ -d ${1} ]]
    then
      local src=`rmtrailingslashes "${1}"`
      local dst="${src}__`now`.tgz"
      echo "[+] compressing \"${1}\" to \"${dst}\""
      tar -czvf "${dst}" "${src}"
    else
      echo "error: input must be a directory"
    fi
  fi
}

tbzbackup()
{
  if [[ ${#} -gt 0 ]]
  then
    if [[ -d ${1} ]]
    then
      local src=`rmtrailingslashes "${1}"`
      local dst="${src}__`now`.tbz"
      echo "[+] compressing \"${1}\" to \"${dst}\""
      tar -cjvf "${dst}" "${src}"
    else
      echo "error: input must be a directory"
    fi
  fi
}

zipbackup()
{
  if [[ ${#} -gt 0 ]]
  then
    if [[ -d ${1} ]]
    then
      local src=`rmtrailingslashes "${1}"`
      local dst="${src}__`now`.zip"
      echo "[+] compressing \"${src}\" to \"${dst}\""
      zip -r "${dst}" "${src}"
    else
      echo "error: input must be a directory"
    fi
  fi
}

backup()
{
  if [[ ${#} -gt 0 ]]
  then
    local src=`rmtrailingslashes "${1}"`
    local dst="${src}__`now`"
    echo "[+] copying \"${1}\" to \"${dst}\""
    cp -r "${src}" "${dst}"
  fi
}

stamp()
{
  if [[ $# -gt 0 ]]
  then
    local src=`rmtrailingslashes "${1}"`
    local dst="${src}__`now`"
    mv "${src}" "${dst}"
    echo "${dst}"
  fi
}

stamp_unixtime()
{
  if [[ $# -gt 0 ]]
  then
    local src=`rmtrailingslashes "${1}"`
    local dst="${src}".`date "+%s"`
    mv "${src}" "${dst}"
    echo "${dst}"
  fi
}

quiet_nohup()
{
  if [[ $# = 0 || -z $@ ]]
  then
    echo "error: quiet_nohup: no command"
  else
    nohup "$@" > /dev/null 2>&1 &
  fi
}

abspath()
{
  # bash doesn't have a truly portable+reliable means
  perl -MCwd=abs_path -MFile::Spec=rel2abs,canonpath \
    -e 'print abs_path($_=(shift)||".") || File::Spec->canonpath(File::Spec->rel2abs($_))' "${1}"
}

iscmd()
{
  [[ $# -gt 0 ]] && silent type -t "${1}" && echo 1
}

pathadd()
{
  # first argument is the name of the environment variable instead of its
  # evaluated value (e.g. "PATH" instead of "$PATH"), because an empty env var
  # will evaluate to nothing, causing the $pos argument to be mistaken for the
  # environment variable's value. the name of the variable will never be empty

  # this might be a tad overkill, but it is an extremely flexible method for
  # adding paths to traditional colon-delimited path lists (e.g. $PATH)
  read -re -d '' script <<'PL'
    use strict;
    use warnings;

    # generates a closure over @p
    sub add
    {
      my @p = @_;
      shift(@p) =~ /^\s*(last|end|after)\s*$/i
        ? sub {    push @p, @_ if @_; @p }
        : sub { unshift @p, @_ if @_; @p }
    }

    my ($envvar, $pos, @path) = @ARGV;

    my $newpath = quotemeta join ':', @path;
    my $add = add($pos || '', grep { $_ !~ /(^|:)${newpath}($|:)/ } split /:/, $ENV{$envvar} || "");

    print join ':', $add->(@path);
PL

  perl -e "${script}" $@
}

pathdel()
{
  # see pathadd() for arguments and overkill comment :)
  read -re -d '' script <<'PL'
    use strict;
    use warnings;

    my ($envvar, @path) = @ARGV;

    my $newpath = quotemeta join ':', @path;
    print join ':', grep { $_ !~ /(^|:)${newpath}($|:)/ } split /:/, $ENV{$envvar} || "";
PL

  perl -e "${script}" $@
}

haspath()
{
  echo "${1}" | \grep -Eq "(^|:)${2}($|:)"
}

touchsz()
{
  if [[ $# -ge 3 ]]
  then
    local file=${1}
    local size=${2}
    local sdev=${3}
    if [[ ! -f "${file}" ]]
    then
      if [[ "${size}" =~ ^[0-9]{1,10}$ ]]
      then
        # dd does not support block sizes greater than 4GiB, so you must
        # use some arithmetic combining options bs and count, which is
        # too complex for the purpose of this function, so do it yourself
        if [[ ${size} -le $(( 4 * $GiB_BYTES )) ]]
        then
          local dev=
          if [[ "${sdev}" =~ ^z(e(r(o)?)?)?$ ]]
          then
            dev="/dev/zero"
          elif [[ "${sdev}" =~ ^r(a(n(d(o(m)?)?)?)?)?$ ]]
          then
            dev="/dev/urandom"
          else
            echo "error: invalid source device selection: ${sdev}"
            return 4
          fi

          dd if="${dev}" of="${file}" bs=${size} count=1

        else
          echo "error: size cannot be greater than 4GiB"
          return 3
        fi
      else
        echo "error: invalid size: ${size}"
        return 2
      fi
    else
      echo "error: file exists: ${file}"
      return 1
    fi
  else
    echo "creates new <file> of <size> bytes, initialized with <zero|random>"
    printf "usage:\n\t${FUNCNAME[0]} <file> <size> <zero|random>\n"
    return 255
  fi
}

findfatties()
{
  local dir=''
  if [[ ${#} -gt 0 ]]
  then
    dir=`rmtrailingslashes "${1}"`
  fi

  if [[ -d "${dir}" ]]
  then
    find "${dir}" -type f -exec stat -f "%z%t%N" {} \+ | sort -nr
  else
    echo "error: findfatties: not a directory: ${dir}"
  fi
}

proxy_set_HOST()
{
  local __proxy_host__='HOST:80'

  export http_proxy="http://$__proxy_host__"
  export HTTP_PROXY="http://$__proxy_host__"
  export https_proxy="https://$__proxy_host__"
  export HTTPS_PROXY="https://$__proxy_host__"

  unset __proxy_host__
  unset no_proxy
}

proxy_unset_all()
{
  local __proxy_host__='localhost,127.0.0.0/8,*.local'

  export no_proxy="$__proxy_host__"

  unset __proxy_host__
  unset http_proxy
  unset HTTP_PROXY
  unset https_proxy
  unset HTTPS_PROXY
}

cdiff()
{
  if [[ ${#} -gt 1 ]]
  then
    colordiff -yW"`tput cols`" "${1}" "${2}"
  else
    echo 'error: missing input'
  fi
}

usbdevices()
{
  # OS X only
  system_profiler SPUSBDataType | sed -ne '/USB Flash Drive/,$p' | sed -ne '/Volumes/,$p' | grep 'Mount Point' | sed -e 's/^ *Mount Point: //'
}

screen.rpi()
{
  local devuart=/dev/cu.SLAB_USBtoUART
  local baud=115200

  local devexists=0
  while [[ ${devexists} -eq 0 ]]
  do
    ls "${devuart}" >/dev/null 2>&1
    [[ $? -eq 0 ]] && devexists=1
  done

  [[ ${devexists} ]] && screen "${devuart}" "${baud}"
}

expose-sdcard()
{
  if [[ $# -lt 2 ]]
  then
    cat <<USAGE
usage: $0 </dev/sdcard> </output/file.vmdk>
USAGE
  else
    local disk=${1}
    local vmdk=${2}
    local user=$(whoami)

    if [[ -f "${disk}" ]]
    then
      if [[ -f "${vmdk}" ]]
      then
        echo "notice: deleting existing virtual disk file: ${vmdk}"
        sudo rm "${vmdk}"
      fi

      sudo diskutil unmountDisk "${disk}"
      sudo VBoxManage internalcommands createrawvmdk -filename "${vmdk}" -rawdisk "${disk}"
      sudo chown "${user}" "${vmdk}"
      sudo chown "${user}" "${disk}"

      echo "VirtualBox hard disk created for ${user}: ${vmdk}"

    else
      echo "error: SD card device not found: ${disk}"
    fi
  fi
}

chmod-tree-rw()
{
  local fmode=644
  local dmode=755

  local args=("${@}")

  if [[ ${#} -lt 1 ]]
  then
    args=(".")
  fi

  for file in "${args[@]}"
  do
    if [[ -f "${file}" ]]
    then

      chmod ${fmode} "${file}"

    elif [[ -d "${file}" ]]
    then

      chmod ${dmode} "${file}"
      find "${file}" -type f -exec chmod ${fmode} {} \+
      find "${file}" -type d -exec chmod ${dmode} {} \+

    fi
  done
}

eval-loop()
{
  if [[ ${#} -gt 1 ]]
  then
    local _IFS="${IFS}"
    IFS=$'\n'
    ${1} | while read -re s
    do
      eval ${2}
    done
    IFS="${_IFS}"
  else
    cat << 'USAGE'
  usage:
    eval-loop 'cmd-with-output' 'expression $s'

  example to find all files below CWD whose output from ``file'' contains "dynamically linked":
    eval-loop 'find . -type f' '[[ $(file "$s") == *"dynamically linked"* ]] || continue ; echo $s'

  example to unmount all USB mass storage devices using the ``usbdevices'' in() ~/.bashrc:
    eval-loop 'usbdevices' 'sudo diskutil umount "$s"'
USAGE
  fi
}

writespeed()
{
  if [[ $# -gt 0 ]]
  then

    local file=$1
    local path=$( dirname "${file}" )

    if [[ ! -d "${path}" ]]
    then
      mkdir -vp "${path}"
      [[ -d "${path}" ]] || return 1
    fi

    if [[ ! -w "${path}" ]]
    then
      echo "error: cannot write to directory: ${path}"
      return 2
    fi

    if [[ -d "${file}" ]]
    then
      echo "error: specified file is a directory: ${file}"
      return 3
    fi

    if [[ -f "${file}" ]] && [[ ! -w "${file}" ]]
    then
      echo "error: cannot overwrite file: ${file}"
      return 4
    fi

    local repeat=0
    while [[ $repeat -eq 0 ]]
    do
      dd if=/dev/urandom of="${file}" bs=25M count=1 2>&1 |\
        grep -vP 'records (in|out)' |\
        sed -E 's/^.+,\s+([^,]+)$/\1/'
      repeat=$? # effectively traps a ctrl+c
    done

  else
    echo "error: no filename given"
    return 255
  fi
}

chrome-tunnel()
{
  local user='andrew'
  local host='192.168.2.1'
  local port='8123'

  [[ ${#} -gt 0 ]] && user="${1}"
  [[ ${#} -gt 1 ]] && host="${2}"
  [[ ${#} -gt 2 ]] && port="${3}"

  local proctag='local socks5 proxy'
  local chromepath='google-chrome'

  ssh -fCND "0.0.0.0:${port}" "${user}"@"${host}" -- "${proctag}"

  "${chromepath}" --proxy-server="socks5://localhost:${port}"

  local procpid=$(pgrep -f "${proctag}")

  if [[ ${#procpid} -gt 0 ]]
  then
    kill "${procpid}"
  else
    echo "error: cannot locate forked SSH tunnel process"
  fi
}

windows-special-folder()
{
  local codemin=0
  local codemax=255

  local errfile=$(mktemp -t "winsferr-XXXX")

  if [[ $# -gt 0 ]]
  then
    cygpath -au -F "${1}"
  else
    for i in $( seq $codemin $codemax )
    do
      local sfpath=$( cygpath -au -F $i 2>"${errfile}" )
      if [[ 0 -eq $( stat -c"%s" "${errfile}" ) ]]
      then
        printf "[%3d] %s\n" "$i" "$sfpath"
      fi
    done
  fi

  rm "${errfile}"
}
