#!/bin/bash

################################################################################
#
#  file: ${HOME}/.bashrc
#
#  date: 03/18/2013
#
#  auth: Andrew Shultzabarger
#
#  desc: initialization script for all bash shell sessions (both interactive
#        and non-interactive!)
#
################################################################################

# ------------------------------------------------------------------------------
#  session-wide variables
# ------------------------------------------------------------------------------

[[ ${OSTYPE} = *darwin* ]] && export HOST_IS_OSX=1
[[ ${OSTYPE} = *cygwin* ]] && export HOST_IS_CYGWIN=1

export PARENT_PROFILE="/etc/profile"
[[ -f "${PARENT_PROFILE}" ]] && . "${PARENT_PROFILE}" # first and foremost

export BASH_FUNCTIONS="${HOME}/.bash_functions"
[[ -f "${BASH_FUNCTIONS}" ]] && . "${BASH_FUNCTIONS}"

export PATH=$( pathadd "PATH" before "${HOME}/bin" "${HOME}/.bin" "/opt/local/bin" "/usr/local/bin" )
export LD_LIBRARY_PATH=$( pathadd "LD_LIBRARY_PATH" before "${HOME}/lib" "${HOME}/.lib" )
export PERL5LIB=$( pathadd "PERL5LIB" before "${HOME}/lib/perl" "${HOME}/.lib/perl" )

# make sure aliases get set -after- we've configured our bin/lib paths
export BASH_ALIASES="${HOME}/.bash_aliases"
[[ -f "${BASH_ALIASES}" ]] && . "${BASH_ALIASES}"

export BASH_COLORS="${HOME}/.bash_colors"
[[ -f "${BASH_COLORS}" ]] && . "${BASH_COLORS}"

export HISTCONTROL=$HISTCONTROL${HISTCONTROL+,}ignoredups

# ------------------------------------------------------------------------------
#  some other convenient constants
# ------------------------------------------------------------------------------

export FALSE=0
export TRUE=1

export DATETIME_FORMAT_LONG="%Y-%h-%d %H:%M:%S"
export DATETIME_FORMAT="%Y-%m-%d__%H-%M-%S"
export TIMESTAMP_FORMAT="%s"

export  KB_BYTES=$(( 10 ** 3  ))
export KiB_BYTES=$((  2 ** 10 ))
export  MB_BYTES=$((  $KB_BYTES ** 2  ))
export MiB_BYTES=$(( $KiB_BYTES ** 2  ))
export  GB_BYTES=$((  $KB_BYTES ** 3  ))
export GiB_BYTES=$(( $KiB_BYTES ** 3  ))

# ------------------------------------------------------------------------------
#  configure dynamic shell prompt based on host system and user
# ------------------------------------------------------------------------------

__prompt()
{
  local exitcode=$?
  local shellpid=$$

  local datetime=$( date +"%d-%b-%Y %H:%M:%S" )
  local hostname=$( hostname )

  local retlen=${#exitcode}
  local pidlen=${#shellpid}
  local widec1=$(( retlen > pidlen ? retlen : pidlen ))

  local p_shellpid=
  local p_exitcode=
  if [[ ${exitcode} -ne 0 ]]
  then
    p_exitcode="\[$Red\]$( printf "%*s" "${widec1}" "${exitcode}" )\[$Color_Off\]"
    p_shellpid="\[$IRed\]$( printf "%*s" "${widec1}" "${shellpid}" )\[$Color_Off\]"
  else
    p_exitcode="\[$White\]$( printf "%*s" "${widec1}" "${exitcode}" )\[$Color_Off\]"
    p_shellpid="\[$White\]$( printf "%*s" "${widec1}" "${shellpid}" )\[$Color_Off\]"
  fi

  local p_connstat=
  local p_clientid=
  local conlen=
  if [[ -n ${SSH_CONNECTION} ]]
  then
    p_clientid=( ${SSH_CONNECTION} )
    p_connstat="$Blue${p_clientid[0]}$IBlue@$Color_Off"
    conlen=$(( ${#p_clientid[0]} + 1 ))
  else
    p_clientid=()
    p_connstat=""
    conlen=0
  fi

  local dtmlen=$( printf "${datetime}" | wc -c )
  local hnmlen=$(( $( printf "${hostname}" | wc -c ) + ${conlen} ))
  local widec2=$(( dtmlen > hnmlen ? dtmlen : hnmlen ))

  local p_hostname="${p_connstat}\[$Blue\]$( printf "%*s" $(( ${widec2} - ${conlen} )) "${hostname}" )\[$Color_Off\]"
  local p_datetime="\[$IBlue\]$( printf "%*s" ${widec2} "${datetime}" )\[$Color_Off\]"

  local p_platform=
  if [[ -n ${ENV_PREFIX} ]] && [[ "${LYNXOS_PREFIX}" == "${ENV_PREFIX}" ]]
  then
    p_platform="\[$IYellow\]LynxOS-178 CDK\[$Color_Off\]"
  else
    test ${HOST_IS_OSX} \
      && p_platform="\[$Cyan\]$(uname -sm)\[$Color_Off\]" \
      || p_platform="\[$Cyan\]$(uname -om)\[$Color_Off\]"
  fi

  local p_prompter=
  if [[ ${UID} -eq 0 ]]
  then
    p_prompter="\[$Red\]|\[$Color_Off\]"
  else
    p_prompter="|"
  fi

  local ss="\[$BIBlack\]::\[$Color_Off\]"
  local p_currpath="\[$ICyan\]\w\[$Color_Off\]"

  local row=( 
      "\n${p_prompter} ${p_shellpid} ${ss} ${p_datetime} ${ss} ${p_platform}"
      "\n${p_prompter} ${p_exitcode} ${ss} ${p_hostname} ${ss} ${p_currpath}"
      "\n${p_prompter} "
    )

  local p_termwidth=$( cols )
  local p_rowwide=0
  for i in "${row[@]}"
  do
    len=$( uncolorseq "$i" | sed -e 's/^\\n//' | wc -c )
    p_rowwide=$(( len > p_rowwide ? len : p_rowwide ))
  done

  if [[ ${p_rowwide} -gt ${p_termwidth} ]]
  then
    echo "too wide"
  fi

  PS1="$( arrjoin "" "${row[@]}" )"
}

export PROMPT_COMMAND=__prompt

                                                      [[ $- != *i* ]] && return
# ------------------------------------------------------------------------------
#  everything below this point will not be evaluated by non-interactive shells
# ------------------------------------------------------------------------------

