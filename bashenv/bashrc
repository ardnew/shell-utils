#!/bin/bash

export __DOT_BASHRC=1
################################################################################
#
#  file: ${HOME}/.bashrc
#
#  date: 03/18/2013
#
#  auth: Andrew Shultzabarger
#
#  desc: initialization script for all bash shell sessions (both interactive
#        and non-interactive!)
#
################################################################################

# ------------------------------------------------------------------------------
#  session configuration
# ------------------------------------------------------------------------------

use_color_prompt=1
default_umask=0022

# ------------------------------------------------------------------------------
#  session-wide variables
# ------------------------------------------------------------------------------

[[ ${OSTYPE} = *darwin* ]] && export HOST_IS_MACOS=1
[[ ${OSTYPE} = *cygwin* ]] && export HOST_IS_CYGWIN=1
[[ "$( uname -a | tr '[:upper:]' '[:lower:]' )" =~ microsoft ]] \
  && export HOST_IS_WSL=1

umask "${default_umask}"

export USE_GNU_COREUTILS=1

if test ${HOST_IS_MACOS}
then
  MACPORTS_ROOT=/opt/local
  MACPORTS_GNUBIN="${MACPORTS_ROOT}/libexec/gnubin"
  if ! [[ -d "${MACPORTS_GNUBIN}" ]]
  then
    unset -v MACPORTS_GNUBIN USE_GNU_COREUTILS
  fi 
fi

export PARENT_PROFILE="/etc/profile"
[[ -f "${PARENT_PROFILE}" ]] && . "${PARENT_PROFILE}" # first and foremost

export BASH_FUNCTIONS="${HOME}/.bash_functions"
[[ -f "${BASH_FUNCTIONS}" ]] && . "${BASH_FUNCTIONS}"

test ${HOST_IS_WSL} \
  && export GOPATH="${HOME}/dev/go" \
  || export GOPATH="${HOME}/Development/go"

export PERL5LIB=$( pathadd "PERL5LIB" before "${HOME}/andrew/src/perl" "${HOME}/lib/perl" "${HOME}/.lib/perl" "${HOME}/${USER}/lib/perl" "${HOME}/Library/Perl/lib/perl5" "${HOME}/Library/Perl/lib/perl5/site_perl/5.24" )

export PATH=$( pathadd "PATH" before "." "${HOME}/bin" "${HOME}/.bin" "${HOME}/${USER}/bin" "${HOME}/andrew/src/perl" "${MACPORTS_GNUBIN}" "/opt/local/bin" "/usr/local/bin" "${GOPATH}/bin" "${GOROOT}/bin" )
export LD_LIBRARY_PATH=$( pathadd "LD_LIBRARY_PATH" before "${HOME}/lib" "${HOME}/.lib" "${HOME}/${USER}/lib" )

# use MXE's Win32 cross-compiler, if available
MXE_INSTALL_PATH="/mnt/toolchain/mxe"
if [[ -d "${MXE_INSTALL_PATH}" ]]
then
  export MXE_INSTALL_PATH
  export MXE_PKG_CONFIG_PATH="${MXE_INSTALL_PATH}/usr/i686-pc-mingw32/lib/pkgconfig"
  export MXE_LD_LIBRARY_PATH="${MXE_INSTALL_PATH}/usr/lib"
  export MXE_LD_RUN_PATH="${MXE_INSTALL_PATH}/usr/lib"
  export MXE_PATH="${MXE_INSTALL_PATH}/usr/bin"

  export PKG_CONFIG_PATH=$( pathadd "PKG_CONFIG_PATH" after "${MXE_PKG_CONFIG_PATH}" )
  export LD_LIBRARY_PATH=$( pathadd "LD_LIBRARY_PATH" after "${MXE_LD_LIBRARY_PATH}" )
  export LD_RUN_PATH=$( pathadd "LD_RUN_PATH" after "${MXE_LD_RUN_PATH}" )
  export PATH=$( pathadd "PATH" after "${MXE_PATH}" )
fi

# make sure aliases get set -after- we've configured functions and bin/lib paths
export BASH_ALIASES="${HOME}/.bash_aliases"
[[ -f "${BASH_ALIASES}" ]] && . "${BASH_ALIASES}"

export BASH_COLORS="${HOME}/.bash_colors"
[[ -f "${BASH_COLORS}" ]] && . "${BASH_COLORS}"

export HISTCONTROL=$HISTCONTROL${HISTCONTROL+,}ignoredups

# shell auto-completion rules
if test ${HOST_IS_MACOS}
then
  AUTOCOMPLETE=/etc/profile.d/bash_completion.sh
  [[ -f "${MACPORTS_ROOT}${AUTOCOMPLETE}" ]] && . "${MACPORTS_ROOT}${AUTOCOMPLETE}"
fi
complete -W "\`[[ -f Makefile ]] && command grep -oE '^[a-zA-Z0-9_.-]+:([^=]|$)' Makefile | sed 's/[^a-zA-Z0-9_.-]*$//'\`" make
complete -C "${GOPATH}/bin/gocomplete" go

# ------------------------------------------------------------------------------
#  other init/rc files
# ------------------------------------------------------------------------------

rc_dir=( "${HOME}/.etc" "${HOME}/etc" )

for dir in "${rc_dir[@]}"
do
  [[ -d "${dir}" ]] || continue
  while read -re file
  do
    name=$( basename "${file}" )
    
    # source any regular files that match *rc
    if [[ "${name}" = *"rc" ]] && [[ -f "${dir}/${name}" ]]
    then
      . "${dir}/${name}"
    fi
  done < <( ls -a1 "${dir}" )
done

# ------------------------------------------------------------------------------
#  some other convenient constants
# ------------------------------------------------------------------------------

export FALSE=0
export TRUE=1

export DATETIME_FORMAT_LONG="%Y-%h-%d %H:%M:%S"
export DATETIME_FORMAT="%Y-%m-%d__%H-%M-%S"
export TIMESTAMP_FORMAT="%s"

export  KB_BYTES=$(( 10 ** 3  ))
export KiB_BYTES=$((  2 ** 10 ))
export  MB_BYTES=$((  $KB_BYTES ** 2  ))
export MiB_BYTES=$(( $KiB_BYTES ** 2  ))
export  GB_BYTES=$((  $KB_BYTES ** 3  ))
export GiB_BYTES=$(( $KiB_BYTES ** 3  ))

# ------------------------------------------------------------------------------
#  configure dynamic shell prompt based on host system and user
# ------------------------------------------------------------------------------

__prompt()
{
  # snag this before it gets overwritten
  local __exit_code=$?

  if [[ -n ${use_color_prompt} ]] && [[ ${use_color_prompt} -ne 0 ]]
  then
    local color_end=${NoColor}
    local color_shell_pid=${IWhite}
    local color_pid_error=${Red}
    local color_exit_code=${IWhite}
    local color_ret_error=${Red}
    local color_date_time=${IBlue}
    local color_user_name=${Blue}
    local color_user_root=${Red}
    local color_user_addr=${IBlue}
    local color_host_name=${Blue}
    local color_arch_type=${Cyan}
    local color_cross_kit=${IGreen}
    local color_curr_path=${ICyan}
    local color_bevel_reg=${White}
    local color_bevel_sup=${Red}
    local color_separator=${IBlack}
  fi

  local column_width=( 0 0 ) # 3rd-column uses all remaining space
  local max_chars=$( cols )

  # --
  #  column 1: PID / exit-code
  # --

  local shell_pid=${$}
  local exit_code=${__exit_code}

  column_width[0]=$(( ${#shell_pid} > ${#exit_code} ? ${#shell_pid} : ${#exit_code} ))

  if [[ ${exit_code} -ne 0 ]]
  then
    shell_pid=$( printf "${color_pid_error} %*s ${color_end}" ${column_width[0]} "${shell_pid}" )
    exit_code=$( printf "${color_ret_error} %*s ${color_end}" ${column_width[0]} "${exit_code}" )
    color_separator=${color_ret_error}
  else
    shell_pid=$( printf "${color_shell_pid} %*s ${color_end}" ${column_width[0]} "${shell_pid}" )
    exit_code=$( printf "${color_exit_code} %*s ${color_end}" ${column_width[0]} "${exit_code}" )
  fi

  # --
  #  column 2: date-time / user@host
  # --

  local date_time=$( date +"%d-%b-%Y %H:%M:%S" )
  test ${HOST_IS_CYGWIN} \
    && local host_name=$( hostname    ) \
    || local host_name=$( hostname -s )
  local user_name=${USER}
  local user_host="${user_name}@${host_name}"

  if [[ -n ${SSH_CONNECTION} ]]
  then
    local conn_stat=( ${SSH_CONNECTION} )
    user_name="${conn_stat[0]}"
    user_host="${user_name}@${host_name}"
  fi

  column_width[1]=$(( ${#date_time} > ${#user_host} ? ${#date_time} : ${#user_host} ))

  local user_size=$(( ${column_width[1]} - ${#host_name} - 1 ))

  [[ ${UID} -eq 0 ]] && color_user_name=${color_user_root}

  date_time=$( printf "${color_date_time} %*s ${color_end}" ${column_width[1]} "${date_time}" )
  user_host=$( printf "${color_user_name} %*s${color_end}${color_user_addr}@${color_host_name}%*s ${color_end}" ${user_size} "${user_name}" ${#host_name} "${host_name}" )

  # --
  #  column 3: platform / working-dir
  # --

  # the remaining columns use as much space as possible, so no need to keep
  # track of their width and postpone adding the ANSI color seq bytes
  local arch_type=
  local curr_path="${color_curr_path} \w ${color_end}" # expanded in PS1

  if [[ -n ${ENV_PREFIX} ]] && [[ "${LYNXOS_PREFIX}" == "${ENV_PREFIX}" ]]
  then
    arch_type="LynxOS-178 CDK"
    color_arch_type="${color_cross_kit}"
  else
    test ${HOST_IS_MACOS} && test ! $USE_GNU_COREUTILS \
      && arch_type=$( uname -sm ) \
      || arch_type=$( uname -om )
  fi
  arch_type="${color_arch_type} ${arch_type} ${color_end}"

  [[ ${UID} -eq 0 ]] \
    && local bezel="${color_bevel_sup}|${color_end}" \
    || local bezel="${color_bevel_reg}|${color_end}"
  local I="${color_separator}::${color_end}"

  # colored bezel causing weird behaviors when scrolling command history
  local bezel="|"

  local PS1_row=(
      "\n${bezel}${shell_pid}$I${date_time}$I${arch_type}"
      "\n${bezel}${exit_code}$I${user_host}$I${curr_path}"
      "\n${bezel} "
    )

  PS1="$( arrjoin '' "${PS1_row[@]}" )"
}

export PROMPT_COMMAND=__prompt

                                                      [[ $- != *i* ]] && return
# ------------------------------------------------------------------------------
#  everything below this point will not be evaluated by non-interactive shells
# ------------------------------------------------------------------------------

